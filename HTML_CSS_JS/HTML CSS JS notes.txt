vs.code 다운
google "vs code" -> download Visual Studio Code -> user installer 64xbit

vs code에서 new file -> new file을 저장하기, 파일 형식을 "HTML"로 설정!

extension "open html in default browser" 설치하기 --> vs code에서 html 보기에는 불편하기에...
저장한 후! "alt + b" 누르면 기본 브라우저에 띄운다.

20년간 HTML4만 사용한 이유 --> MS
1990년대 후반에 MS가 OS 시장을 장악 --> OS에게 가장 위협적인 것은 OS에 종속적이지 않은 Web & 웹브라우저
그래서 MS는 Web의 발전을 적극적으로 저해 --> Windows OS와 함께 Internet Explorer를 기본적으로 추가 --> 대부분 사람들이 IE 사용
MS가 남의 것을 모두 배껴서 자기걸 똑같이 만들어서 쓰니, 다른 개발자는 자괴감 빠져서 그만둠
MS는 또 W3C와 연합해 XHTML을 개발 --> 이상한 곳으로 발전해나감
Apple, Opera, Google 등이 뭉쳐서 WHATWG개발 --> 결국 MS & W3C는 XHTML의 실패 인정, WHATWG가 오늘날의 HTML5
HTML4는 20년전 기술이기에 웹브라우저 성능이 안 좋았다 --> HTML5는 태그 하나로 바로 영상, 음성 등을 추가할 수 있다 (예전에는 flash등으로 따로 연결해야 했다)

ActiveX & Flash가 대표적인 웹플러그인 --> 문제는 둘 다 보안상 취약하다, 그 외에 "무겁기" 때문에 웹브라우저에 부담된다

우리가 취업하면 어려워할 일은 SQL & JavaScript --> SQL은 업무를 모르기에 왜 이렇게 짰는지 모르기에, JS는 대부분 학원에서 대충하고 끝내기에
Spring은 세팅이 어렵지 사용은 쉽다

html은 사실 xml이다 --> xml은 태그를 정의하는것 --> 태그를 정의한 것이 DTD 부분 (HTML5 맨 처음에 <!DOCTYPE html>이라고 뜨는 줄)
XML의 개발 목적은 표준화된 데이터의 교환 (XML에서 X는 eXchange를 의미)

semantic element는 없어도 / 사용하지 않아도 문제 없다 --> 원칙적으로는 써야하지만
semantic element는 장애인 편의성을 위해 만들어진 측면이 크다
layout 같은 것을 설정하는데 semantic 필요없이 CSS로 한다

developer.mozilla.org -> HTML에 있어서 가장 정확하고 체계적인 정보
w3schools -> mozilla보다 쉽게 설명하고, 오른쪽에 뜨는 HOW TO도 좋고, 특히나 reference 부분이 우수

bootstrap
다른 사람들이 미리 만들어 놓은 것이기에, 그냥 가져가서 사용하기는 편하다
하지만 이것을 내 포트폴리오에서 사용한다는 것은 내가 할 실력이 안된다는 의미로 받아들여질 것
실제로 bootstrap을 수정하려면 깊이 이해하지 못한 개발자는 어렵다 --> 확장성이 부족하다

개발자는 JS에 집중해야 --> JS 마스터한 후 css, html을 더 배워나가야

JS 실습
chrome / firefox -> 개발자도구(F12) -> "console" 탭 ==> 여기서 그냥 치고 엔터 누르면 실행된다.

jQuery <-> JS
JS가 어려워서 (상대적으로...) 쉽게 변형시킨 것이 jQuery
JS보다 배우기 쉽고, 반대로 JS 잘 알면 jQuery 쉽다
하지만 jQuery부터 배우면 반대로 JS 알기 어렵다
JS를 알아야 React, Angular, Vue 등을 할 수 있기에 JS를 더 중요시한다 (외국에서는 아예 jQuery 배우지 말라고 충고)

요즘 추세는 agile하게 유연하게 개발 --> test-driven development(TDD) 덕분에 test시간이 덜 걸리고, Continuous Integration(CI)로 미완성품을 발표하면서 문제가 생기면서 그때그때 고치면서 개발한다

브라우저 개발자 도구에 나와있는 코드가 DOM --> console 탭에서 바로 수정할 수 있다

chrome + f12에서 브라우저에 출력된 내용의 내용이나 형식을 수정할 수 있다 --> vs code에서 작성한 원본 코드는 영향 없지만, 현재 출력된 페이지의 내용이 바뀐다
작업순서
1. DOM에서 원하는 요소 찾기 (getElement(s), querySelect...)
2. 요소의 값을 읽거나 바꾸거나 CSS style을 수정하거나 작업한다.

Babel transpiler --> ECMA6으로 코드를 작성하면 ECMA5로 바꿔준다.

CSS & HTML은 정적이다 --> alt + B로 출력하면 끝, 이벤트 처리 등은 불가능
프로그래밍적 요소 (이벤트처리, 클릭하면 어떻게 되고, 검색창으로 검색하고 등등) --> JS의 영역, 동적인 영역

chrome + f12 + console 탭 --> dir(태그명) --> 해당 태그의 속성이 자세하게 출력된다.

getElements는 성능이 떨어진다 (전체를 뒤져야 하기에) --> 차라리 element navigation으로 찾아가는게 좋다 (getElement는 절대적 일치를 찾는다, navigation은 상대적 일치를 찾는다)

DOM Level 0 -> old version, 함수를 하나만 등록 가능
DOM Level 2 -> new version, 함수를 여럿 등록 가능